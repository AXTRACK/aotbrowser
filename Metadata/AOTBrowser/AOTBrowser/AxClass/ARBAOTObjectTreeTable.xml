<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ARBAOTObjectTreeTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Xpp = Microsoft.Dynamics.Ax.Xpp;
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// Override the Object Tree for Tables
/// </summary>
[ARBAOTObjectType(ARBAOTObjectType::Table)]
class ARBAOTObjectTreeTable extends ARBAOTObjectTree
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the object tree
    /// </summary>
    /// <param name = "_aotNodeName">The name of the AOT object</param>
    public void update(TreeNodeName _aotNodeName)
    {
        AxTable table = Xpp.MetadataSupport::GetTable(_aotNodeName);
        if (table != null)
        {
            super(_aotNodeName);
        }
        else
        {
            ARBAOTObjectTree objectTree = ARBAOTObjectTree::newFromAOTObject(treeControl, ARBAOTObjectType::View, extensionsInline);
            objectTree.update(_aotNodeName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtensionCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a collection of extensions to the tree
    /// </summary>
    /// <param name = "_collection">The collection to add</param>
    /// <param name = "_collectionName">The collection name</param>
    /// <param name = "_extensionName">The extension name</param>
    protected void addExtensionCollection(System.Collections.IEnumerable _collection, str _collectionName, str _extensionName)
    {
        switch (_collectionName)
        {
            case ARBAOTBrowserConstants::FieldGroupExtensions:
                System.Collections.IEnumerator fieldGroupEnum = _collection.GetEnumerator();
                if (collectionMap.exists(ARBAOTBrowserConstants::FieldGroups))
                {
                    Map fieldGroupsMap = collectionMap.lookup(ARBAOTBrowserConstants::FieldGroups);
                    while (fieldGroupEnum.MoveNext())
                    {
                        AxTableFieldGroupExtension fieldGroupExtension = fieldGroupEnum.Current;
                        TreeItemIdx parentIdx = fieldGroupsMap.lookup(fieldGroupExtension.Name);
                        parentIdx = treeControl.getChild(parentIdx); // Get the index of the Fields node
                        var fieldsEnum = fieldGroupExtension.Fields.GetEnumerator();
                        while (fieldsEnum.MoveNext())
                        {
                            this.addExtension(fieldsEnum.Current, parentIdx, _extensionName);
                        }
                    }
                }
                break;
            case ARBAOTBrowserConstants::RelationExtensions:
                System.Collections.IEnumerator relationEnum = _collection.GetEnumerator();
                if (collectionMap.exists(ARBAOTBrowserConstants::Relations))
                {
                    Map relationsMap = collectionMap.lookup(ARBAOTBrowserConstants::Relations);
                    while (relationEnum.MoveNext())
                    {
                        AxTableRelationExtension relationExtension = relationEnum.Current;
                        TreeItemIdx parentIdx = relationsMap.lookup(relationExtension.Name);
                        parentIdx = treeControl.getChild(parentIdx); // Get the index of the Constraints node
                        var constraintsEnum = relationExtension.RelationConstraints.GetEnumerator();
                        while (constraintsEnum.MoveNext())
                        {
                            this.addExtension(constraintsEnum.Current, parentIdx, _extensionName);
                        }
                    }
                }
                break;
            default:
                super(_collection, _collectionName, _extensionName);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>