<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ARBAOTBrowser</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Xpp = Microsoft.Dynamics.Ax.Xpp;
using ArbelaXpp = Arbela.Dynamics.Ax.Xpp;
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using System.Reflection;
using System.Linq.Enumerable;

/// <summary>
/// ACM AOT browser form
/// </summary>
[Form]
public class ARBAOTBrowser extends FormRun
{
    ARBAOTObjectType objectType;
    TreeNodeName aotNodeName;
    FormGridControl propertiesMatrixGrid;


}
]]></Source>
			</Method>
			<Method>
				<Name>updateControlsFromTable</Name>
				<Source><![CDATA[
    public void updateControlsFromTable()
    {
        this.updateControls(ARBAOTObjects.Type, ARBAOTObjects.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    public void updateControls(ARBAOTObjectType _objectType, TreeNodeName _aotNodeName)
    {
        objectType = _objectType;
        aotNodeName = _aotNodeName;

        ResourceImageGroup.visible(false);

        boolean tableBrowserEnabled = false;
        switch (_objectType)
        {
            case ARBAOTObjectType::Table:
                this.updateTableControls(_aotNodeName);
                tableBrowserEnabled = true;
                break;
            case ARBAOTObjectType::View:
                this.updateViewControls(_aotNodeName);
                tableBrowserEnabled = true;
                break;
            case ARBAOTObjectType::BaseEnum:
                this.updateEnumControls(_aotNodeName);
                break;
            case ARBAOTObjectType::ExtendedDataType:
                this.updateEdtControls(_aotNodeName);
                break;
            case ARBAOTObjectType::DataEntity:
                this.updateDataEntityControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Class:
                this.updateClassControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Form:
                this.updateFormControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Query:
                this.updateQueryControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Map:
                this.updateMapControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Tile:
                this.updateTileControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Menu:
                this.updateMenuControls(_aotNodeName);
                break;
            case ARBAOTObjectType::TableCollection:
                this.updateTableCollectionControls(_aotNodeName);
                break;
            case ARBAOTObjectType::CompositeDataEntity:
                this.updateCompositeDataEntityControls(_aotNodeName);
                break;
            case ARBAOTObjectType::MenuItemDisplay:
                this.updateMenuItemDisplayControls(_aotNodeName);
                break;
            case ARBAOTObjectType::MenuItemAction:
                this.updateMenuItemActionControls(_aotNodeName);
                break;
            case ARBAOTObjectType::MenuItemOutput:
                this.updateMenuItemOutputControls(_aotNodeName);
                break;
            case ARBAOTObjectType::SecurityRole:
                this.updateSecurityRoleControls(_aotNodeName);
                break;
            case ARBAOTObjectType::SecurityDuty:
                this.updateSecurityDutyControls(_aotNodeName);
                break;
            case ARBAOTObjectType::SecurityPrivilege:
                this.updateSecurityPrivilegeControls(_aotNodeName);
                break;
            case ARBAOTObjectType::AggregateDataEntity:
                this.updateAggregateDataEntityControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowCategory:
                this.updateWorkflowCategoryControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowApproval:
                this.updateWorkflowApprovalControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowTask:
                this.updateWorkflowTaskControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowAutomatedTask:
                this.updateWorkflowAutomatedTaskControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowType:
                this.updateWorkflowTypeControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowHierarchyAssignmentProvider:
                this.updateWorkflowHierarchyProviderControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowParticipantAssignmentProvider:
                this.updateWorkflowParticipantProviderControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowQueueAssignmentProvider:
                this.updateWorkflowQueueProviderControls(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowDueDateCalculationProvider:
                this.updateWorkflowDueDateCalcProviderControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Resource:
                this.updateResourceControls(_aotNodeName);
                break;
            case ARBAOTObjectType::LicenseCode:
                this.updateLicenseCodeControls(_aotNodeName);
                break;
            case ARBAOTObjectType::ConfigKey:
                this.updateConfigKeyControls(_aotNodeName);
                break;
            case ARBAOTObjectType::ConfigKeyGroup:
                this.updateConfigKeyGroupControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Service:
                this.updateServiceControls(_aotNodeName);
                break;
            case ARBAOTObjectType::ServiceGroup:
                this.updateServiceGroupControls(_aotNodeName);
                break;
            case ARBAOTObjectType::Report:
                this.updateReportControls(_aotNodeName);
                break;
        }
        ARBOpenTableBrowser.enabled(tableBrowserEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableControls</Name>
				<Source><![CDATA[
    public void updateTableControls(TreeNodeName _aotNodeName)
    {        
        AxTable table = Xpp.MetadataSupport::GetTable(_aotNodeName);
        if (table != null)
        {
            TreeItemIdx rootIdx = this.updateObjectTree(table, table.Name);
            var tableExtensions = Xpp.MetadataSupport::GetTableExtensionsForTable(_aotNodeName);
            System.Collections.IEnumerator enumerator = tableExtensions.GetEnumerator();

            TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, tableExtensions, 0, true);
            while (enumerator.moveNext())
            {
                this.addTreeNode(enumerator.Current, extensionsIdx);
            }
            TableTab.caption(table.Name + ' - ' + enum2Str(objectType));
            this.updatePropertiesGroup(table);
        }
        else
        {
            objectType = ARBAOTObjectType::View;
            this.updateViewControls(_aotNodeName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEnumControls</Name>
				<Source><![CDATA[
    public void updateEnumControls(TreeNodeName _aotNodeName)
    {
        
        AxEnum enum = Xpp.MetadataSupport::GetEnum(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(enum, enum.Name);
        var enumExtensions = ArbelaXpp.MetadataSupport::GetEnumExtensionsForEnum(_aotNodeName);
        System.Collections.IEnumerator enumerator = enumExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, enumExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(enum.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEdtControls</Name>
				<Source><![CDATA[
    public void updateEdtControls(TreeNodeName _aotNodeName)
    {
        
        AxEdt edt = Xpp.MetadataSupport::GetEdt(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(edt, edt.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetEdtExtensionsForEdt(_aotNodeName);
        System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(edt.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(edt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataEntityControls</Name>
				<Source><![CDATA[
    public void updateDataEntityControls(TreeNodeName _aotNodeName)
    {
        AxDataEntityView dataEntityView = Xpp.MetadataSupport::GetDataEntityView(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(dataEntityView, dataEntityView.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetDataEntityViewExtensionsForDataEntityView(_aotNodeName);
        System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(dataEntityView.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(dataEntityView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClassControls</Name>
				<Source><![CDATA[
    public void updateClassControls(TreeNodeName _aotNodeName)
    {
        AxClass axClass = Xpp.MetadataSupport::GetClass(_aotNodeName);
        this.updateObjectTree(axClass, axClass.Name);

        TableTab.caption(axClass.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormControls</Name>
				<Source><![CDATA[
    public void updateFormControls(TreeNodeName _aotNodeName)
    {
        AxForm axform = Xpp.MetadataSupport::GetForm(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axform, axform.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetFormExtensionsForForm(_aotNodeName);
        var formExtensionsEnum = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (formExtensionsEnum.moveNext())
        {
            this.addTreeNode(formExtensionsEnum.Current, extensionsIdx);
        }
        TableTab.caption(axform.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axform);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryControls</Name>
				<Source><![CDATA[
    public void updateQueryControls(TreeNodeName _aotNodeName)
    {
        AxQuery axQuery = Xpp.MetadataSupport::GetQuery(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axQuery, axQuery.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetQueryExtensionsForQuery(_aotNodeName);
        var enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(axQuery.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMapControls</Name>
				<Source><![CDATA[
    public void updateMapControls(TreeNodeName _aotNodeName)
    {
        AxMap map = Xpp.MetadataSupport::GetMap(_aotNodeName);
        this.updateObjectTree(map, map.Name);
        TableTab.caption(map.Name);
        this.updatePropertiesGroup(map);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateViewControls</Name>
				<Source><![CDATA[
    public void updateViewControls(TreeNodeName _aotNodeName)
    {
        
        AxView view = Xpp.MetadataSupport::GetView(_aotNodeName);
        if (view != null)
        {
            TreeItemIdx rootIdx = this.updateObjectTree(view, view.Name);
            var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetViewExtensionsForView(_aotNodeName);
            System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

            TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
            while (enumerator.moveNext())
            {
                this.addTreeNode(enumerator.Current, extensionsIdx);
            }
            TableTab.caption(view.Name + ' - ' + enum2Str(objectType));
            this.updatePropertiesGroup(view);
        }
        else
        {
            objectType = ARBAOTObjectType::DataEntity;
            this.updateDataEntityControls(_aotNodeName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMenuControls</Name>
				<Source><![CDATA[
    public void updateMenuControls(TreeNodeName _aotNodeName)
    {
        AxMenu axMenu = Xpp.MetadataSupport::GetMenu(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axMenu, axMenu.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetMenuExtensionsForMenu(_aotNodeName);
        System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(axMenu.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axMenu);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTileControls</Name>
				<Source><![CDATA[
    public void updateTileControls(TreeNodeName _aotNodeName)
    {
        AxTile tile = Xpp.MetadataSupport::GetTile(_aotNodeName);
        this.updateObjectTree(tile, tile.Name);

        TableTab.caption(tile.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(tile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableCollectionControls</Name>
				<Source><![CDATA[
    public void updateTableCollectionControls(TreeNodeName _aotNodeName)
    {
        AxTableCollection tableCollection = ArbelaXpp.MetadataSupport::GetTableCollection(_aotNodeName);
        this.updateObjectTree(tableCollection, tableCollection.Name);

        TableTab.caption(tableCollection.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(tableCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompositeDataEntityControls</Name>
				<Source><![CDATA[
    public void updateCompositeDataEntityControls(TreeNodeName _aotNodeName)
    {
        AxCompositeDataEntityView compositeDataEntity = ArbelaXpp.MetadataSupport::GetCompositeDataEntity(_aotNodeName);
        this.updateObjectTree(compositeDataEntity, compositeDataEntity.Name);

        TableTab.caption(compositeDataEntity.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(compositeDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAggregateDataEntityControls</Name>
				<Source><![CDATA[
    public void updateAggregateDataEntityControls(TreeNodeName _aotNodeName)
    {
        AxAggregateDataEntity aggregateDataEntity = Xpp.MetadataSupport::GetAggregateDataEntity(_aotNodeName);
        this.updateObjectTree(aggregateDataEntity, aggregateDataEntity.Name);

        TableTab.caption(aggregateDataEntity.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aggregateDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMenuItemDisplayControls</Name>
				<Source><![CDATA[
    public void updateMenuItemDisplayControls(TreeNodeName _aotNodeName)
    {
        AxMenuItemDisplay axMenuItem = Xpp.MetadataSupport::GetMenuItemDisplay(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axMenuItem, axMenuItem.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetMenuItemDisplayExtensionsForMenuItemDisplay(_aotNodeName);
        var enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(axMenuItem.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axMenuItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMenuItemActionControls</Name>
				<Source><![CDATA[
    public void updateMenuItemActionControls(TreeNodeName _aotNodeName)
    {
        AxMenuItemAction axMenuItem = Xpp.MetadataSupport::GetMenuItemAction(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axMenuItem, axMenuItem.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetMenuItemActionExtensionsForMenuItemAction(_aotNodeName);
        var enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(axMenuItem.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axMenuItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMenuItemOutputControls</Name>
				<Source><![CDATA[
    public void updateMenuItemOutputControls(TreeNodeName _aotNodeName)
    {
        AxMenuItemOutput axMenuItem = Xpp.MetadataSupport::GetMenuItemOutput(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axMenuItem, axMenuItem.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetMenuItemOutputExtensionsForMenuItemOutput(_aotNodeName);
        var enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(axMenuItem.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axMenuItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSecurityRoleControls</Name>
				<Source><![CDATA[
    public void updateSecurityRoleControls(TreeNodeName _aotNodeName)
    {
        AxSecurityRole axSecurityRole = Xpp.MetadataSupport::GetSecurityRole(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axSecurityRole, axSecurityRole.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetSecurityRoleExtensionsForSecurityRole(_aotNodeName);
        System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(axSecurityRole.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axSecurityRole);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSecurityDutyControls</Name>
				<Source><![CDATA[
    public void updateSecurityDutyControls(TreeNodeName _aotNodeName)
    {
        AxSecurityDuty axSecurityDuty = ArbelaXpp.MetadataSupport::GetSecurityDuty(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(axSecurityDuty, axSecurityDuty.Name);
        var extensions = ArbelaXpp.MetadataSupport::GetSecurityDutyExtensionsForSecurityDuty(_aotNodeName);
        System.Collections.IEnumerator enumerator = extensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, extensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(axSecurityDuty.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axSecurityDuty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSecurityPrivilegeControls</Name>
				<Source><![CDATA[
    public void updateSecurityPrivilegeControls(TreeNodeName _aotNodeName)
    {
        AxSecurityPrivilege axSecurityPrivilege = ArbelaXpp.MetadataSupport::GetSecurityPrivilege(_aotNodeName);
        this.updateObjectTree(axSecurityPrivilege, axSecurityPrivilege.Name);

        TableTab.caption(axSecurityPrivilege.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(axSecurityPrivilege);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowCategoryControls</Name>
				<Source><![CDATA[
    public void updateWorkflowCategoryControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowCategory(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowApprovalControls</Name>
				<Source><![CDATA[
    public void updateWorkflowApprovalControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowApproval(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);
        // Current support for this starts in PU29
        //var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetWorkflowApprovalExtensionsForWorkflowApproval(_aotNodeName);
        //System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

        //TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        //while (enumerator.moveNext())
        //{
        //    this.addTreeNode(enumerator.Current, extensionsIdx);
        //}
        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowTaskControls</Name>
				<Source><![CDATA[
    public void updateWorkflowTaskControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowTask(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);
        // Current support for this starts in PU29
        //var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetWorkflowTaskExtensionsForWorkflowTask(_aotNodeName);
        //System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

        //TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        //while (enumerator.moveNext())
        //{
        //    this.addTreeNode(enumerator.Current, extensionsIdx);
        //}
        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowAutomatedTaskControls</Name>
				<Source><![CDATA[
    public void updateWorkflowAutomatedTaskControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowAutomatedTask(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowTypeControls</Name>
				<Source><![CDATA[
    public void updateWorkflowTypeControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowTemplate(_aotNodeName);
        TreeItemIdx rootIdx = this.updateObjectTree(aotObject, aotObject.Name);
        var aotObjectExtensions = ArbelaXpp.MetadataSupport::GetWorkflowTemplateExtensionsForWorkflowTemplate(_aotNodeName);
        System.Collections.IEnumerator enumerator = aotObjectExtensions.GetEnumerator();

        TreeItemIdx extensionsIdx = SysFormTreeControl::addTreeItem(TableTree, 'Extensions', rootIdx, aotObjectExtensions, 0, true);
        while (enumerator.moveNext())
        {
            this.addTreeNode(enumerator.Current, extensionsIdx);
        }
        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowHierarchyProviderControls</Name>
				<Source><![CDATA[
    public void updateWorkflowHierarchyProviderControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowHierarchyAssignmentProvider(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowParticipantProviderControls</Name>
				<Source><![CDATA[
    public void updateWorkflowParticipantProviderControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowParticipantAssignmentProvider(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowQueueProviderControls</Name>
				<Source><![CDATA[
    public void updateWorkflowQueueProviderControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowQueueAssignmentProvider(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowDueDateCalcProviderControls</Name>
				<Source><![CDATA[
    public void updateWorkflowDueDateCalcProviderControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetWorkflowDueDateCalculationProvider(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceControls</Name>
				<Source><![CDATA[
    public void updateResourceControls(TreeNodeName _aotNodeName)
    {
        AxResource aotObject = Xpp.MetadataSupport::GetResource(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);
        
        if (aotObject.TypeOfResource == Microsoft.Dynamics.AX.Metadata.Core.MetaModel.ResourceType::Images)
        {
            ResourceImage.imageLocation(SysImageLocation::AOTResource);
            ResourceImage.normalImage(_aotNodeName);
            ResourceImageGroup.colorScheme(FormColorScheme::RGB);
            ResourceImageGroup.backgroundColor(WinAPI::RGB2int(220,220,220));
            ResourceImageGroup.visible(true);
        }

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLicenseCodeControls</Name>
				<Source><![CDATA[
    public void updateLicenseCodeControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetLicenseCode(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConfigKeyControls</Name>
				<Source><![CDATA[
    public void updateConfigKeyControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetConfigurationKey(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConfigKeyGroupControls</Name>
				<Source><![CDATA[
    public void updateConfigKeyGroupControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetConfigurationKeyGroup(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceControls</Name>
				<Source><![CDATA[
    public void updateServiceControls(TreeNodeName _aotNodeName)
    {
        var aotObject = ArbelaXpp.MetadataSupport::GetService(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceGroupControls</Name>
				<Source><![CDATA[
    public void updateServiceGroupControls(TreeNodeName _aotNodeName)
    {
        var aotObject = ArbelaXpp.MetadataSupport::GetServiceGroup(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportControls</Name>
				<Source><![CDATA[
    public void updateReportControls(TreeNodeName _aotNodeName)
    {
        var aotObject = Xpp.MetadataSupport::GetReport(_aotNodeName);
        this.updateObjectTree(aotObject, aotObject.Name);

        TableTab.caption(aotObject.Name + ' - ' + enum2Str(objectType));
        this.updatePropertiesGroup(aotObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPropertiesMatrix</Name>
				<Source><![CDATA[
    public void clearPropertiesMatrix(boolean _recreate = false)
    {

        if (propertiesMatrixGrid != null)
        {
            element.design().removeControl(propertiesMatrixGrid.id());
        }

        if (_recreate)
        {
            propertiesMatrixGrid = TableDetailsPropertiesGroup.addControl(FormControlType::Grid, 'PropertiesMatrixGrid');
            propertiesMatrixGrid.dataSource(ARBAOTObjectPropertiesMatrix_ds.id());
            propertiesMatrixGrid.widthMode(FormWidth::ColumnWidth);
            propertiesMatrixGrid.heightMode(FormHeight::ColumnHeight);
            propertiesMatrixGrid.visible(false);
        }

        // This is to make the table scroll correctly
        TableTab.widthMode(FormWidth::ColumnWidth);
        TableTab.heightMode(FormHeight::ColumnHeight);
        TableBodyGroup.widthMode(FormWidth::ColumnWidth);
        TableBodyGroup.heightMode(FormHeight::ColumnHeight);
        TableDetailsGroup.widthMode(FormWidth::ColumnWidth);
        TableDetailsGroup.heightMode(FormHeight::ColumnHeight);
        TableDetailsPropertiesGroup.widthMode(FormWidth::ColumnWidth);
        TableDetailsPropertiesGroup.heightMode(FormHeight::ColumnHeight);
        PropertiesGrid.widthMode(FormWidth::ColumnWidth);
        PropertiesGrid.heightMode(FormHeight::ColumnHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePropertiesGroup</Name>
				<Source><![CDATA[
    public void updatePropertiesGroup(anytype _object)
    {
        delete_from ARBAOTObjectProperties;
        delete_from ARBAOTObjectPropertiesMatrix;
        
        if (!(typeOf(_object) == Types::String) && !(_object is System.String))
        {
            if (_object is System.Collections.IEnumerable)
            {
                element.clearPropertiesMatrix(true);
                var enumerable = _object as System.Collections.IEnumerable;
                PropertiesGrid.visible(false);
                System.Collections.IEnumerator enumerator = enumerable.GetEnumerator();
                Map propMap = new Map(Types::String, Types::Integer);
                int nextArrayNum = 1;
                FormStringControl previousControl = propertiesMatrixGrid.addDataField(ARBAOTObjectPropertiesMatrix_ds.id(), fieldNum(ARBAOTObjectPropertiesMatrix, TypeName));
                while (enumerator.moveNext())
                {
                    anytype object = enumerator.Current;
                    System.Type t = object.GetType();
                    PropertyInfo nameProp = t.GetProperty('Name');
                    str name;
                    if (nameProp != null)
                    {
                        name = nameProp.GetValue(object).ToString();
                    }
                    ARBAOTObjectPropertiesMatrix.clear();
                    ARBAOTObjectPropertiesMatrix.TypeName = name;

                    var props = t.GetProperties();
                    for (int i = 0; i < props.Length; i++)
                    {
                        PropertyInfo prop = props.GetValue(i);
                        if (((prop.GetValue(object) is System.String) ||
                            (!(prop.GetValue(object) is System.Collections.IEnumerable)
                                && prop.PropertyType.Name != 'AxPropertyCollection'
                                && prop.PropertyType.Name != 'AxFormPropertyCollection'))
                            && prop.Name != 'CompilerMetadata')
                        {
                            int arrayNum;
                            if (propMap.exists(prop.Name))
                            {
                                arrayNum = propMap.lookup(prop.Name);
                            }
                            if (arrayNum == 0)
                            {
                                arrayNum = nextArrayNum;

                                if (arrayNum > 100)
                                {
                                    continue;
                                }

                                nextArrayNum++;
                                propMap.insert(prop.Name, arrayNum);
                                previousControl = propertiesMatrixGrid.addDataField(ARBAOTObjectPropertiesMatrix_ds.id(), fieldNum(ARBAOTObjectPropertiesMatrix, Property), previousControl, arrayNum);
                                previousControl.label(prop.Name);
                            }

                            if (prop.Name == 'ReturnType')
                            {
                                AxMethodReturnType returnType = prop.GetValue(object);
                                ARBAOTObjectPropertiesMatrix.Property[arrayNum] = returnType.Type.ToString() + ' - ' + returnType.TypeName;
                            }
                            else
                            {
                                ARBAOTObjectPropertiesMatrix.Property[arrayNum] = prop.Name == 'Label' || prop.Name == 'Description' || prop.Name == 'HelpText' || prop.Name == 'DeveloperDocumentation' || prop.Name == 'EntityRelationshipRole' ? SysLabel::labelId2String(prop.GetValue(object).ToString()) : (prop.GetValue(object) == null ? '' : prop.GetValue(object).ToString());
                            }
                        }
                    }
                    ARBAOTObjectPropertiesMatrix.insert();
                }

                propertiesMatrixGrid.visible(true);
                
            }
            else
            {
                element.clearPropertiesMatrix();
                System.Type t = _object.GetType();
       
                var props = t.GetProperties();
                for (int i = 0; i < props.Length; i++)
                {
                    PropertyInfo prop = props.GetValue(i);
                    if (((prop.GetValue(_object) is System.String) ||
                        (!(prop.GetValue(_object) is System.Collections.IEnumerable)
                            && prop.PropertyType.Name != 'AxPropertyCollection'
                            && prop.PropertyType.Name != 'AxFormPropertyCollection'))
                    && prop.Name != 'CompilerMetadata')
                    {
                        ARBAOTObjectProperties.clear();
                        ARBAOTObjectProperties.Name = prop.Name;
                        if (prop.Name == 'ReturnType')
                        {
                            AxMethodReturnType returnType = prop.GetValue(_object);
                            ARBAOTObjectProperties.Value = returnType.Type.ToString() + ' - ' + returnType.TypeName;
                        }
                        else
                        {
                            ARBAOTObjectProperties.Value = prop.Name == 'Label' || prop.Name == 'Description' || prop.Name == 'HelpText' || prop.Name == 'DeveloperDocumentation' || prop.Name == 'EntityRelationshipRole' ? SysLabel::labelId2String(prop.GetValue(_object).ToString()) : (prop.GetValue(_object) == null ? '' : prop.GetValue(_object).ToString());
                        }
                        ARBAOTObjectProperties.insert();
                    }
                }
                PropertiesGrid.visible(true);
            }
        }
        else
        {
            element.clearPropertiesMatrix();
            PropertiesGrid.visible(false);
        }
        ARBAOTObjectProperties_ds.executeQuery();
        ARBAOTObjectPropertiesMatrix_ds.executeQuery();

        //element.reload();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateObjectTree</Name>
				<Source><![CDATA[
    public TreeItemIdx updateObjectTree(anytype _object, str _rootNodeName)
    {
        TableTree.deleteAll();

        TreeItemIdx rootIdx = this.addTreeNode(_object, FormTreeAdd::Root);

        SysFormTreeControl::expandTree(TableTree, rootIdx, 1);

        return rootIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTreeNode</Name>
				<Source><![CDATA[
    public TreeItemIdx addTreeNode(anytype _object, TreeItemIdx _idx, FormTreeAdd _formTreeAdd = FormTreeAdd::Sort)
    {
        System.Type t = _object.GetType();
        
        var props = t.GetProperties();
        PropertyInfo nameProp = t.GetProperty('Name');
        str name;
        if (nameProp != null)
        {
            name = nameProp.GetValue(_object).ToString();
        }
        else if (_object is AxTableMappingConnection)
        {
            AxTableMappingConnection mapConn = _object as AxTableMappingConnection;
            name = strFmt('%1 == %2', mapConn.MapField, mapConn.MapFieldTo);
        }
        else
        {
            name = _object.ToString();
        }

        TreeItemIdx parentIdx = _idx;
        if (name != 'FormDesign')
        {
            parentIdx = SysFormTreeControl::addTreeItem(TableTree, name, _idx, _object, 0, false, 0, _formTreeAdd);
        }
        for (int i = 0; i < props.Length; i++)
        {
            PropertyInfo prop = props.GetValue(i);
            if (prop.PropertyType.Name != 'String'
                && (prop.Name == 'ViewMetadata' || prop.Name == 'DataSource' || prop.Name == 'Design'))
            {
                var propValue = prop.GetValue(_object);
                TreeItemIdx idx = SysFormTreeControl::addTreeItem(TableTree, prop.Name, parentIdx, propValue, 0, true, 0, _formTreeAdd);
                this.addTreeNode(propValue, idx, prop.Name == 'Design' ? FormTreeAdd::Last : _formTreeAdd);
            }
            else if (prop.PropertyType.Name == 'KeyedObjectCollection`1')
            {
                var col = prop.GetValue(_object) as System.Collections.IEnumerable;
                TreeItemIdx idx = parentIdx;
                if (prop.Name != 'Controls')
                {
                    idx = SysFormTreeControl::addTreeItem(TableTree, prop.Name, parentIdx, col, 0, true, 0,_formTreeAdd);
                }
                System.Collections.IEnumerator enumerator = col.GetEnumerator();

                while (enumerator.moveNext())
                {
                    this.addTreeNode(enumerator.Current, idx, _formTreeAdd);
                }
            }
        }

        return parentIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void init()
    {
        super();

        Args args = element.args();

        if (args.parmEnumType() == enumNum(ARBAOTObjectType) && args.parm() != null)
        {
            NavigationGroup.visible(false);
            ARBAOTObjects_ds.queryBuildDataSource().enabled(false);
            this.updateControls(args.parmEnum(), args.parm());
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ARBAOTObjects</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public int active()
        {
            int ret;
        
            ret = super();

            element.updateControlsFromTable();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ARBOpenTableBrowser</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            super();

            SysTableBrowser sysTableBrowser;
            
            sysTableBrowser = new SysTableBrowser();
            sysTableBrowser.parmTableName(ARBAOTObjects.Name);
            sysTableBrowser.run(tablename2id(ARBAOTObjects.Name));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AOTObjectTypeFilter</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            if (AOTObjectTypeFilter.selection() == enum2int(ARBAOTObjectType::None))
            {
                ARBAOTObjects_ds.queryBuildDataSource().clearRange(fieldNum(ARBAOTObjects,Type));
            }
            else
            {
                SysQuery::findOrCreateRange(ARBAOTObjects_ds.queryBuildDataSource(), fieldNum(ARBAOTObjects,Type)).value(queryValue(AOTObjectTypeFilter.selection()));
            }
            ARBAOTObjects_ds.executeQuery();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TableTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <param name = "_OldItem"></param>
        /// <param name = "_NewItem"></param>
        /// <param name = "_how"></param>
        public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
        {
            super(_OldItem, _NewItem, _how);

            element.updatePropertiesGroup(_NewItem.data());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ACMAOTObjectProperties_Value</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void jumpRef()
        {
            ARBAOTObjectProperties props;
            props.setTmpData(ARBAOTObjectProperties);
            Args args = new Args();
            args.parmEnumType(enumNum(ARBAOTObjectType));

            switch(ARBAOTObjectProperties.Name)
            {
                case 'Table':
                case 'RelatedTable':
                    args.parmEnum(ARBAOTObjectType::Table);
                    args.parm(this.valueStr());
                    new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    break;

                case 'ExtendedDataType':
                    args.parmEnum(ARBAOTObjectType::ExtendedDataType);
                    args.parm(this.valueStr());
                    new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    break;

                case 'EnumType':
                    args.parmEnum(ARBAOTObjectType::BaseEnum);
                    args.parm(this.valueStr());
                    new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    break;

                case 'Tile':
                    args.parmEnum(ARBAOTObjectType::Tile);
                    args.parm(this.valueStr());
                    new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    break;

                case 'DataEntity':
                    args.parmEnum(ARBAOTObjectType::DataEntity);
                    args.parm(this.valueStr());
                    new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    break;

                case 'Object':
                case 'ObjectName':
                    props.setTmpData(ARBAOTObjectProperties);
                    select firstOnly props
                        where props.Name == 'ObjectType';
                    if (props)
                    {
                        switch (props.Value)
                        {
                            case 'Form':
                                args.parmEnum(ARBAOTObjectType::Form);
                                break;
                            case 'Class':
                                args.parmEnum(ARBAOTObjectType::Class);
                                break;
                            case 'Query':
                                args.parmEnum(ARBAOTObjectType::Query);
                                break;
                            case 'MenuItemAction':
                                args.parmEnum(ARBAOTObjectType::MenuItemAction);
                                break;
                            case 'MenuItemDisplay':
                                args.parmEnum(ARBAOTObjectType::MenuItemDisplay);
                                break;
                            case 'MenuItemOutput':
                                args.parmEnum(ARBAOTObjectType::MenuItemOutput);
                                break;
                        }
                        args.parm(this.valueStr());
                        new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    }
                    break;

                case 'Extends':
                    select firstOnly props
                        where props.Name == 'SupportInheritance';
                    if (props)
                    {
                        args.parmEnum(ARBAOTObjectType::Table);
                        args.parm(this.valueStr());
                        new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    }
                    else
                    {
                        args.parmEnum(ARBAOTObjectType::ExtendedDataType);
                        args.parm(this.valueStr());
                        new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    }
                    break;

                case 'MenuItemName':
                    props.setTmpData(ARBAOTObjectProperties);
                    select firstOnly props
                        where props.Name == 'MenuItemType';
                    if (props)
                    {
                        switch (props.Value)
                        {
                            case 'Display':
                                args.parmEnum(ARBAOTObjectType::MenuItemDisplay);
                                break;
                            case 'Action':
                                args.parmEnum(ARBAOTObjectType::MenuItemAction);
                                break;
                            case 'Output':
                                args.parmEnum(ARBAOTObjectType::MenuItemOutput);
                                break;
                        }
                        args.parm(this.valueStr());
                        new MenuFunction(menuItemDisplayStr(ARBAOTBrowser), MenuItemType::Display).run(args);
                    }
                    break;
            }

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ARBAOTObjects</Name>
			<Table>ARBAOTObjects</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Label</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ARBAOTObjectProperties</Name>
			<Table>ARBAOTObjectProperties</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ARBAOTObjectPropertiesMatrix</Name>
			<Table>ARBAOTObjectPropertiesMatrix</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[1]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[10]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[11]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[12]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[13]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[14]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[15]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[16]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[17]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[18]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[19]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[2]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[20]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[21]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[22]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[23]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[24]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[25]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[26]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[27]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[28]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[29]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[3]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[30]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[31]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[32]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[33]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[34]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[35]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[36]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[37]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[38]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[39]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[4]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[40]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[41]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[42]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[43]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[44]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[45]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[46]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[47]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[48]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[49]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[5]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[50]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[51]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[52]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[53]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[54]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[55]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[56]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[57]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[58]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[59]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[6]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[60]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[61]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[62]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[63]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[64]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[65]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[66]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[67]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[68]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[69]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[7]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[70]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[71]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[72]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[73]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[74]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[75]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[8]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Property[9]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@AOTBrowser:AOTBrowser</Caption>
		<Pattern xmlns="">SimpleListDetails</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleListDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ApplicationBar</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>GeneralButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ARBAOTObjectPopulate</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ARBAOTObjectPopulate</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ARBOpenTableBrowser</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@AOTBrowser:OpenTableBrowserButton</Text>
							</AxFormControl>
						</Controls>
						<Caption>General</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavigationGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>NavigationGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AOTObjectTypeFilterGroup</Name>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>AOTObjectTypeFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ARBAOTObjectType</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>NavigationGrid</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Grid</Type>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ACMAOTObjects_Name</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>ARBAOTObjects</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ACMAOTObjects_Label</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Label</DataField>
								<DataSource>ARBAOTObjects</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ACMAOTObjects_Type</Name>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Type</DataField>
								<DataSource>ARBAOTObjects</DataSource>
								<Items />
							</AxFormControl>
						</Controls>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DetailsTabs</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TableTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>NestedSimpleListDetails</Pattern>
						<PatternVersion>UX7 1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TableBodyGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TableNavigationList</Name>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormTreeControl">
												<Name>TableTree</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Tree</Type>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TableDetailsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>TableDetailsHeader</Name>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<ColumnsMode>Fill</ColumnsMode>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>TableDetailsPropertiesGroup</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Pattern>Custom</Pattern>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>PropertiesGrid</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>SizeToContent</HeightMode>
														<Type>Grid</Type>
														<WidthMode>SizeToContent</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ACMAOTObjectProperties_Name</Name>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Name</DataField>
																<DataSource>ARBAOTObjectProperties</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ACMAOTObjectProperties_Value</Name>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Value</DataField>
																<DataSource>ARBAOTObjectProperties</DataSource>
															</AxFormControl>
														</Controls>
														<DataSource>ARBAOTObjectProperties</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ResourceImageGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormImageControl">
																<Name>ResourceImage</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Height>250</Height>
																<HeightMode>Manual</HeightMode>
																<Type>Image</Type>
																<Width>250</Width>
																<WidthMode>Manual</WidthMode>
																<FormControlExtension
																	i:nil="true" />
															</AxFormControl>
														</Controls>
														<Caption>@SYS58650</Caption>
													</AxFormControl>
												</Controls>
												<ColumnsMode>Fill</ColumnsMode>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@AOTBrowser:Object</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>